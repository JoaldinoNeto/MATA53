{"version":3,"sources":["style.js","utils/TarjanOLCA.js","App.js","index.js"],"names":["Container","styled","div","Aside","FormCreateGraph","globalTree","label","children","parent","undefined","rank","ancestor","color","lowestCommonAncestorsState","Find","tree","x","xIndex","findIndex","node","Union","y","xRoot","yRoot","TarjanOLCA","currentNode","setState","console","log","currentNodeIndex","MakeSet","v","nodeOne","nodeTwo","lowestCommonAncestors","App","useState","nodeKey","nodeValue","linkKey","linkValue","inputValues","setInputValues","setLowestCommonAncestors","nodes","edges","graph","n_one","resInputValues","setResInputValues","handleInputValues","element","index","obj","currentTarget","name","newInputValues","includes","value","map","input","type","onChange","Button","variant","onClick","push","length","style","marginTop","currentTree","id","parseInt","replaceAll","split","currentGraph","pick","from","to","find","n","width","height","n_two","options","layout","hierarchical","events","select","event","getNetwork","network","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2e1f182.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst Container = styled.div`\n  height: 100%;\n  width: 100%;\n  background-color: white;\n  display: flex;\n`;\n\nconst Aside = styled.div`\n  height: 100%;\n  width: 400px;\n  background-color: rgba(0, 0, 0, 0.12);\n`;\n\nconst FormCreateGraph = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  & > div {\n    display: grid;\n    grid-template-columns: calc(50% - 8px) calc(50% - 8px);\n    grid-gap: 16px;\n  }\n`;\n\nexport { Container, Aside, FormCreateGraph };\n","let globalTree = [\n  {\n    label: \"A\",\n    children: [\"B\", \"C\"],\n    parent: undefined,\n    rank: undefined,\n    ancestor: undefined,\n    color: \"white\",\n  },\n  {\n    label: \"B\",\n    children: [],\n    parent: undefined,\n    rank: undefined,\n    ancestor: undefined,\n    color: \"white\",\n  },\n  {\n    label: \"C\",\n    children: [\"D\", \"E\"],\n    parent: undefined,\n    rank: undefined,\n    ancestor: undefined,\n    color: \"white\",\n  },\n  {\n    label: \"D\",\n    children: [],\n    parent: undefined,\n    rank: undefined,\n    ancestor: undefined,\n    color: \"white\",\n  },\n  {\n    label: \"E\",\n    children: [],\n    parent: undefined,\n    rank: undefined,\n    ancestor: undefined,\n    color: \"white\",\n  },\n];\n\nlet lowestCommonAncestorsState = {};\n\nfunction MakeSet(tree, x) {\n  // console.log(`MakeSet: ${x}`);\n\n  const xIndex = tree.findIndex((node) => node.label === x);\n\n  tree[xIndex].parent = xIndex;\n  tree[xIndex].rank = 1;\n}\n\nfunction Find(tree, x) {\n  // console.log(`Find: ${x}`);\n\n  const xIndex = tree.findIndex((node) => node.label === x);\n\n  if (tree[xIndex].parent !== xIndex) {\n    tree[xIndex].parent = Find(tree, tree[tree[xIndex].parent].label);\n  }\n\n  return tree[xIndex].parent;\n}\n\nfunction Union(tree, x, y) {\n  // console.log(`Union: ${x}, ${y}`);\n\n  const xRoot = Find(tree, x);\n  const yRoot = Find(tree, y);\n\n  if (tree[xRoot].rank > tree[yRoot].rank) {\n    tree[yRoot].parent = xRoot;\n  } else if (tree[xRoot].rank < tree[yRoot].rank) {\n    tree[xRoot].parent = yRoot;\n  } else if (tree[xRoot].rank === tree[yRoot].rank) {\n    tree[yRoot].parent = xRoot;\n    tree[xRoot].rank = tree[xRoot].rank + 1;\n  }\n}\n\nfunction TarjanOLCA(tree, currentNode, setState) {\n  console.log(\"=====\");\n  console.log(`-> node: ${currentNode}`);\n\n  const currentNodeIndex = tree.findIndex((node) => node.label === currentNode);\n\n  MakeSet(tree, currentNode);\n  tree[currentNodeIndex].ancestor = currentNodeIndex;\n\n  for (let v of tree[currentNodeIndex].children) {\n    TarjanOLCA(tree, v);\n    Union(tree, currentNode, v);\n    tree[Find(tree, currentNode)].ancestor = currentNodeIndex;\n  }\n\n  tree[currentNodeIndex].color = \"black\";\n  console.log(`: ${currentNode} foi colorido de preto`);\n\n  for (let v of tree) {\n    if (v.color === \"black\") {\n      let nodeOne = tree[currentNodeIndex].label;\n      let nodeTwo = v.label;\n      let lowestCommonAncestors =\n        tree[tree[Find(tree, v.label)].ancestor].label;\n\n      if (setState) {\n        lowestCommonAncestorsState[`${nodeOne}_${nodeTwo}`] =\n          lowestCommonAncestors;\n\n        setState(lowestCommonAncestorsState);\n      }\n\n      console.log(\n        `=> Menor ancestral comum de ${nodeOne} e ${nodeTwo} Ã© ${lowestCommonAncestors}.`\n      );\n    }\n  }\n}\n\nconsole.log(\"# Tarjan's off-line lowest common ancestors algorithm #\\n\");\nTarjanOLCA(globalTree, \"A\");\n\n// console.log(\"\\n\\n# Resultado do state #\\n\");\n// console.log(globalTree);\n\nexport default TarjanOLCA;\n","import { useState, Fragment } from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport Graph from \"react-graph-vis\";\nimport { pick } from \"lodash\";\n\nimport { Container, Aside, FormCreateGraph } from \"./style\";\nimport TarjanOLCA from \"./utils/TarjanOLCA\";\n\nfunction App() {\n  const [inputValues, setInputValues] = useState([\n    { nodeKey: \"node_0\", nodeValue: \"\", linkKey: \"link_0\", linkValue: \"\" },\n  ]);\n  const [lowestCommonAncestors, setLowestCommonAncestors] = useState({});\n  const [graph, setGraph] = useState({ nodes: [], edges: [] });\n\n  const [resInputValues, setResInputValues] = useState([\n    { n_one: \"\", n_one: \"\" },\n  ]);\n\n  const handleSubmitForm = () => {\n    let currentTree = [];\n\n    for (let index in inputValues) {\n      if (inputValues[index].nodeValue) {\n        currentTree.push({\n          id: typeof index === \"string\" ? parseInt(index, 10) : index,\n          label: inputValues[index].nodeValue || inputValues[index].nodeKey,\n          children:\n            inputValues[index]?.linkValue &&\n            inputValues[index]?.linkValue.length > 0\n              ? (inputValues[index].linkValue || \"\")\n                  .replaceAll(\" \", \"\")\n                  .split(\",\")\n              : [],\n          parent: undefined,\n          rank: undefined,\n          ancestor: undefined,\n          color: \"white\",\n        });\n      }\n    }\n\n    // Dsenha Grafo\n    let currentGraph = {\n      nodes: currentTree.map((node) => pick(node, [\"id\", \"label\"])),\n      edges: [],\n    };\n    for (let node of currentTree || []) {\n      // console.log(\"node: \", node);\n      for (let children of node?.children || []) {\n        // console.log(\"children: \", children);\n        currentGraph.edges.push({\n          from: node.id,\n          to: currentTree.find((n) => n.label === children)?.id,\n        });\n      }\n    }\n    // setGraph(currentGraph);\n    // console.log(currentGraph);\n\n    // Executa algortimo\n    TarjanOLCA(currentTree, currentTree[0].label, setLowestCommonAncestors);\n\n    // console.log(currentTree);\n  };\n\n  const handleInputValues = (element) => {\n    const index = inputValues.findIndex(\n      (obj) =>\n        obj.nodeKey === element.currentTarget.name ||\n        obj.linkKey === element.currentTarget.name\n    );\n\n    const newInputValues = [...inputValues];\n    newInputValues[index][\n      element.currentTarget.name.includes(\"node\") ? \"nodeValue\" : \"linkValue\"\n    ] = element.currentTarget.value;\n\n    setInputValues(newInputValues);\n  };\n\n  const options = {\n    layout: {\n      hierarchical: true,\n    },\n    edges: {\n      color: \"#000000\",\n    },\n    height: \"500px\",\n  };\n\n  const events = {\n    select: function (event) {\n      var { nodes, edges } = event;\n    },\n  };\n\n  return (\n    <Container>\n      <Aside>\n        <h2>Construa seu GrÃ¡fico</h2>\n\n        <div>\n          <FormCreateGraph>\n            <div>\n              <span>\"Nome\" dos nÃ³s (o primeiro nÃ³ serÃ¡ a raiz)</span>\n              <span>\"Filhos\" dos nÃ³s (separado por vÃ­rgula)</span>\n\n              <span>EX.: A</span>\n              <span>EX.: B, C</span>\n\n              <span>EX.: B</span>\n              <span></span>\n\n              <span>EX.: C</span>\n              <span></span>\n\n              {(inputValues || []).map((input) => (\n                <Fragment key={input.nodeKey}>\n                  <input\n                    type=\"text\"\n                    name={input.nodeKey}\n                    onChange={(element) => handleInputValues(element)}\n                  />\n                  <input\n                    type=\"text\"\n                    name={input.linkKey}\n                    onChange={(element) => handleInputValues(element)}\n                  />\n                </Fragment>\n              ))}\n\n              <Button\n                variant=\"outlined\"\n                onClick={() => {\n                  const newInputValues = [...inputValues];\n                  newInputValues.push({\n                    nodeKey: `node_${(inputValues || []).length}`,\n                    nodeValue: \"\",\n                    linkKey: `link_${(inputValues || []).length}`,\n                    linkValue: \"\",\n                  });\n\n                  setInputValues(newInputValues);\n                }}\n              >\n                Adicionar nÃ³\n              </Button>\n            </div>\n\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ marginTop: 32 }}\n              onClick={handleSubmitForm}\n            >\n              Carregar GrÃ¡fico\n            </Button>\n          </FormCreateGraph>\n        </div>\n      </Aside>\n\n      <div style={{ width: \"100%\", height: \"100%\" }}>\n        <div>\n          Menor ancestral comum de{\" \"}\n          <input\n            type=\"text\"\n            name=\"n_one\"\n            onChange={(element) =>\n              setResInputValues({\n                ...resInputValues,\n                n_one: element.currentTarget.value,\n              })\n            }\n          />{\" \"}\n          e{\" \"}\n          <input\n            type=\"text\"\n            name=\"n_two\"\n            onChange={(element) =>\n              setResInputValues({\n                ...resInputValues,\n                n_two: element.currentTarget.value,\n              })\n            }\n          />{\" \"}\n          Ã©{\" \"}\n          <strong>\n            {lowestCommonAncestors?.[\n              `${resInputValues.n_one}_${resInputValues.n_two}`\n            ] ||\n              lowestCommonAncestors?.[\n                `${resInputValues.n_two}_${resInputValues.n_one}`\n              ] ||\n              \"\"}\n          </strong>\n          .\n        </div>\n\n        <div style={{ width: \"100%\", height: \"100%\" }}>\n          <Graph\n            graph={graph}\n            options={options}\n            events={events}\n            getNetwork={(network) => {}}\n          />\n        </div>\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"normalize.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}